// @ts-check

var semver = require("../semver.js");
var satisfies = semver.satisfies;

test("range tests", function() {
  // [range, version]
  // version should be included by range
  [
    ["1.0.0 - 2.0.0", "1.2.3"],
    ["^1.2.3+build", "1.2.3"],
    ["^1.2.3+build", "1.3.0"],
    ["1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3"],
    ["1.2.3pre+asdf - 2.4.3-pre+asdf", "1.2.3", true],
    ["1.2.3-pre+asdf - 2.4.3pre+asdf", "1.2.3", true],
    ["1.2.3pre+asdf - 2.4.3pre+asdf", "1.2.3", true],
    ["1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3-pre.2"],
    ["1.2.3-pre+asdf - 2.4.3-pre+asdf", "2.4.3-alpha"],
    ["1.2.3+asdf - 2.4.3+asdf", "1.2.3"],
    ["1.0.0", "1.0.0"],
    [">=*", "0.2.4"],
    ["", "1.0.0"],
    ["*", "1.2.3", {}],
    ["*", "v1.2.3", { loose: 123 }],
    [">=1.0.0", "1.0.0", /asdf/],
    [">=1.0.0", "1.0.1", { loose: null }],
    [">=1.0.0", "1.1.0", { loose: 0 }],
    [">1.0.0", "1.0.1", { loose: undefined }],
    [">1.0.0", "1.1.0"],
    ["<=2.0.0", "2.0.0"],
    ["<=2.0.0", "1.9999.9999"],
    ["<=2.0.0", "0.2.9"],
    ["<2.0.0", "1.9999.9999"],
    ["<2.0.0", "0.2.9"],
    [">= 1.0.0", "1.0.0"],
    [">=  1.0.0", "1.0.1"],
    [">=   1.0.0", "1.1.0"],
    ["> 1.0.0", "1.0.1"],
    [">  1.0.0", "1.1.0"],
    ["<=   2.0.0", "2.0.0"],
    ["<= 2.0.0", "1.9999.9999"],
    ["<=  2.0.0", "0.2.9"],
    ["<    2.0.0", "1.9999.9999"],
    ["<\t2.0.0", "0.2.9"],
    [">=0.1.97", "v0.1.97", true],
    [">=0.1.97", "0.1.97"],
    ["0.1.20 || 1.2.4", "1.2.4"],
    [">=0.2.3 || <0.0.1", "0.0.0"],
    [">=0.2.3 || <0.0.1", "0.2.3"],
    [">=0.2.3 || <0.0.1", "0.2.4"],
    ["||", "1.3.4"],
    ["2.x.x", "2.1.3"],
    ["1.2.x", "1.2.3"],
    ["1.2.x || 2.x", "2.1.3"],
    ["1.2.x || 2.x", "1.2.3"],
    ["x", "1.2.3"],
    ["2.*.*", "2.1.3"],
    ["1.2.*", "1.2.3"],
    ["1.2.* || 2.*", "2.1.3"],
    ["1.2.* || 2.*", "1.2.3"],
    ["*", "1.2.3"],
    ["2", "2.1.2"],
    ["2.3", "2.3.1"],
    ["~x", "0.0.9"], // >=2.4.0 <2.5.0
    ["~2", "2.0.9"], // >=2.4.0 <2.5.0
    ["~2.4", "2.4.0"], // >=2.4.0 <2.5.0
    ["~2.4", "2.4.5"],
    ["~>3.2.1", "3.2.2"], // >=3.2.1 <3.3.0,
    ["~1", "1.2.3"], // >=1.0.0 <2.0.0
    ["~>1", "1.2.3"],
    ["~> 1", "1.2.3"],
    ["~1.0", "1.0.2"], // >=1.0.0 <1.1.0,
    ["~ 1.0", "1.0.2"],
    ["~ 1.0.3", "1.0.12"],
    [">=1", "1.0.0"],
    [">= 1", "1.0.0"],
    ["<1.2", "1.1.1"],
    ["< 1.2", "1.1.1"],
    ["~v0.5.4-pre", "0.5.5"],
    ["~v0.5.4-pre", "0.5.4"],
    ["=0.7.x", "0.7.2"],
    ["<=0.7.x", "0.7.2"],
    [">=0.7.x", "0.7.2"],
    ["<=0.7.x", "0.6.2"],
    ["~1.2.1 >=1.2.3", "1.2.3"],
    ["~1.2.1 =1.2.3", "1.2.3"],
    ["~1.2.1 1.2.3", "1.2.3"],
    ["~1.2.1 >=1.2.3 1.2.3", "1.2.3"],
    ["~1.2.1 1.2.3 >=1.2.3", "1.2.3"],
    ["~1.2.1 1.2.3", "1.2.3"],
    [">=1.2.1 1.2.3", "1.2.3"],
    ["1.2.3 >=1.2.1", "1.2.3"],
    [">=1.2.3 >=1.2.1", "1.2.3"],
    [">=1.2.1 >=1.2.3", "1.2.3"],
    [">=1.2", "1.2.8"],
    ["^1.2.3", "1.8.1"],
    ["^0.1.2", "0.1.2"],
    ["^0.1", "0.1.2"],
    ["^0.0.1", "0.0.1"],
    ["^1.2", "1.4.2"],
    ["^1.2 ^1", "1.4.2"],
    ["^1.2.3-alpha", "1.2.3-pre"],
    ["^1.2.0-alpha", "1.2.0-pre"],
    ["^0.0.1-alpha", "0.0.1-beta"],
    ["^0.1.1-alpha", "0.1.1-beta"],
    ["^x", "1.2.3"],
    ["x - 1.0.0", "0.9.7"],
    ["x - 1.x", "0.9.7"],
    ["1.0.0 - x", "1.9.7"],
    ["1.x - x", "1.9.7"],
    ["<=7.x", "7.9.9"]
  ].forEach(function(v) {
    var range = v[0];
    var ver = v[1];
    var loose = v[2];
    expect(satisfies(ver, range, loose)).toBe(true);
  });
});

test("negative range tests", function() {
  // [range, version]
  // version should not be included by range
  [
    ["1.0.0 - 2.0.0", "2.2.3"],
    ["1.2.3+asdf - 2.4.3+asdf", "1.2.3-pre.2"],
    ["1.2.3+asdf - 2.4.3+asdf", "2.4.3-alpha"],
    ["^1.2.3+build", "2.0.0"],
    ["^1.2.3+build", "1.2.0"],
    ["^1.2.3", "1.2.3-pre"],
    ["^1.2", "1.2.0-pre"],
    [">1.2", "1.3.0-beta"],
    ["<=1.2.3", "1.2.3-beta"],
    ["^1.2.3", "1.2.3-beta"],
    ["=0.7.x", "0.7.0-asdf"],
    [">=0.7.x", "0.7.0-asdf"],
    ["1", "1.0.0beta", { loose: 420 }],
    ["<1", "1.0.0beta", true],
    ["< 1", "1.0.0beta", true],
    ["1.0.0", "1.0.1"],
    [">=1.0.0", "0.0.0"],
    [">=1.0.0", "0.0.1"],
    [">=1.0.0", "0.1.0"],
    [">1.0.0", "0.0.1"],
    [">1.0.0", "0.1.0"],
    ["<=2.0.0", "3.0.0"],
    ["<=2.0.0", "2.9999.9999"],
    ["<=2.0.0", "2.2.9"],
    ["<2.0.0", "2.9999.9999"],
    ["<2.0.0", "2.2.9"],
    [">=0.1.97", "v0.1.93", true],
    [">=0.1.97", "0.1.93"],
    ["0.1.20 || 1.2.4", "1.2.3"],
    [">=0.2.3 || <0.0.1", "0.0.3"],
    [">=0.2.3 || <0.0.1", "0.2.2"],
    ["2.x.x", "1.1.3", { loose: NaN }],
    ["2.x.x", "3.1.3"],
    ["1.2.x", "1.3.3"],
    ["1.2.x || 2.x", "3.1.3"],
    ["1.2.x || 2.x", "1.1.3"],
    ["2.*.*", "1.1.3"],
    ["2.*.*", "3.1.3"],
    ["1.2.*", "1.3.3"],
    ["1.2.* || 2.*", "3.1.3"],
    ["1.2.* || 2.*", "1.1.3"],
    ["2", "1.1.2"],
    ["2.3", "2.4.1"],
    ["~2.4", "2.5.0"], // >=2.4.0 <2.5.0
    ["~2.4", "2.3.9"],
    ["~>3.2.1", "3.3.2"], // >=3.2.1 <3.3.0
    ["~>3.2.1", "3.2.0"], // >=3.2.1 <3.3.0
    ["~1", "0.2.3"], // >=1.0.0 <2.0.0
    ["~>1", "2.2.3"],
    ["~1.0", "1.1.0"], // >=1.0.0 <1.1.0
    ["<1", "1.0.0"],
    [">=1.2", "1.1.1"],
    ["1", "2.0.0beta", true],
    ["~v0.5.4-beta", "0.5.4-alpha"],
    ["=0.7.x", "0.8.2"],
    [">=0.7.x", "0.6.2"],
    ["<0.7.x", "0.7.2"],
    ["<1.2.3", "1.2.3-beta"],
    ["=1.2.3", "1.2.3-beta"],
    [">1.2", "1.2.8"],
    ["^0.0.1", "0.0.2"],
    ["^1.2.3", "2.0.0-alpha"],
    ["^1.2.3", "1.2.2"],
    ["^1.2", "1.1.9"],
    ["*", "v1.2.3-foo", true],
    // invalid ranges never satisfied!
    ["blerg", "1.2.3"],
    ["git+https://user:password0123@github.com/foo", "123.0.0", true],
    ["^1.2.3", "2.0.0-pre"],
    ["^1.2.3", false]
  ].forEach(function(v) {
    var range = v[0];
    var ver = v[1];
    var loose = v[2];
    var found = satisfies(ver, range, loose);
    expect(found).toBe(false);
  });
});

test("unlocked prerelease range tests", function() {
  // [range, version]
  // version should be included by range
  [
    ["*", "1.0.0-rc1"],
    ["^1.0.0", "2.0.0-rc1"],
    ["^1.0.0-0", "1.0.1-rc1"],
    ["^1.0.0-rc2", "1.0.1-rc1"],
    ["^1.0.0", "1.0.1-rc1"],
    ["^1.0.0", "1.1.0-rc1"]
  ].forEach(function(v) {
    var range = v[0];
    var ver = v[1];
    var options = { includePrerelease: true };
    expect(satisfies(ver, range, options)).toBe(true);
  });
});

test("negative unlocked prerelease range tests", function() {
  // [range, version]
  // version should not be included by range
  [["^1.0.0", "1.0.0-rc1"], ["^1.2.3-rc2", "2.0.0"]].forEach(function(v) {
    var range = v[0];
    var ver = v[1];
    var options = { includePrerelease: true };
    var found = satisfies(ver, range, options);
    expect(found).toBe(false);
  });
});
